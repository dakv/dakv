#[cfg(test)]
mod test {
    use crate::db::{ErrorIterator, FileMetaData, LevelFileNumIter};
    use crate::utils::cmp::{BytewiseComparatorImpl, InternalKeyComparatorImpl};
    use crate::utils::iter::Iter;
    use std::sync::Arc;

    fn init_file_meta(size: u64, num: u64, small: &[u8], large: &[u8]) -> Arc<FileMetaData> {
        let mut f = FileMetaData::new();
        f.set_file_size(size);
        f.set_file_number(num);
        f.set_largest_from_slice(large);
        f.set_smallest_from_slice(small);
        Arc::new(f)
    }

    #[test]
    fn test_level() {
        let iter = Arc::new(InternalKeyComparatorImpl::new(Arc::new(
            BytewiseComparatorImpl::new(),
        )));

        #[rustfmt::skip]
        let list = vec![
            init_file_meta(27361, 5,&[1, 1, 0, 0, 0, 0, 0, 0] ,&[0, 100, 1, 253, 101, 101, 1, 1, 63, 5, 0, 0, 0, 0, 0]), 
            init_file_meta(27846, 7,&[0, 100, 1, 253, 253, 99, 1, 64, 5, 0, 0, 0, 0, 0] ,&[1, 0, 100, 100, 98, 98, 1, 98, 101, 1, 1, 111, 10, 0, 0, 0, 0, 0]), 
            init_file_meta(27544, 9,&[1, 0, 100, 100, 254, 98, 254, 98, 255, 97, 97, 99, 255, 255, 98, 1, 112, 10, 0, 0, 0, 0, 0] ,&[1, 100, 254, 253, 99, 99, 1, 167, 15, 0, 0, 0, 0, 0]), 
            init_file_meta(27518, 11,&[1, 100, 254, 253, 101, 0, 253, 0, 253, 0, 254, 255, 1, 1, 168, 15, 0, 0, 0, 0, 0] ,&[97, 1, 97, 98, 1, 100, 0, 0, 1, 225, 20, 0, 0, 0, 0, 0]), 
            init_file_meta(27651, 13,&[97, 1, 97, 98, 98, 101, 98, 1, 226, 20, 0, 0, 0, 0, 0] ,&[97, 101, 100, 99, 1, 254, 1, 22, 26, 0, 0, 0, 0, 0]), 
            init_file_meta(27441, 15,&[97, 101, 100, 99, 97, 101, 101, 99, 1, 23, 26, 0, 0, 0, 0, 0] ,&[98, 1, 253, 101, 1, 83, 31, 0, 0, 0, 0, 0]), 
            init_file_meta(27517, 17,&[98, 1, 253, 101, 1, 99, 0, 255, 1, 84, 31, 0, 0, 0, 0, 0] ,&[98, 101, 255, 1, 100, 97, 253, 97, 255, 98, 1, 139, 36, 0, 0, 0, 0, 0]), 
            init_file_meta(27549, 19,&[98, 101, 255, 1, 255, 100, 101, 99, 97, 255, 255, 1, 140, 36, 0, 0, 0, 0, 0] ,&[99, 97, 1, 0, 253, 98, 101, 1, 99, 253, 1, 197, 41, 0, 0, 0, 0, 0]), 
            init_file_meta(27517, 21,&[99, 97, 1, 0, 253, 99, 98, 255, 255, 255, 255, 1, 198, 41, 0, 0, 0, 0, 0] ,&[99, 253, 97, 99, 1, 1, 99, 0, 1, 255, 1, 254, 253, 97, 255, 1, 254, 46, 0, 0, 0, 0, 0]), 
            init_file_meta(27808, 23,&[99, 253, 97, 99, 101, 255, 1, 255, 46, 0, 0, 0, 0, 0] ,&[100, 97, 100, 100, 1, 1, 47, 52, 0, 0, 0, 0, 0]), 
            init_file_meta(27624, 25,&[100, 97, 100, 100, 100, 0, 255, 254, 0, 1, 48, 52, 0, 0, 0, 0, 0] ,&[100, 253, 253, 101, 254, 1, 101, 57, 0, 0, 0, 0, 0]), 
            init_file_meta(27417, 27,&[100, 253, 253, 253, 253, 98, 254, 255, 254, 254, 1, 102, 57, 0, 0, 0, 0, 0] ,&[101, 97, 255, 255, 98, 100, 255, 254, 1, 162, 62, 0, 0, 0, 0, 0]), 
            init_file_meta(27569, 29,&[101, 97, 255, 255, 99, 1, 163, 62, 0, 0, 0, 0, 0] ,&[101, 254, 97, 101, 1, 217, 67, 0, 0, 0, 0, 0]), 
            init_file_meta(27446, 31,&[101, 254, 97, 101, 100, 255, 100, 1, 218, 67, 0, 0, 0, 0, 0] ,&[253, 98, 99, 254, 1, 21, 73, 0, 0, 0, 0, 0]), 
            init_file_meta(27581, 33,&[253, 98, 99, 255, 1, 22, 73, 0, 0, 0, 0, 0] ,&[253, 254, 254, 0, 100, 98, 253, 98, 101, 1, 253, 100, 1, 78, 78, 0, 0, 0, 0, 0]), 
            init_file_meta(27510, 35,&[253, 254, 254, 0, 101, 255, 101, 255, 97, 0, 101, 1, 1, 79, 78, 0, 0, 0, 0, 0] ,&[254, 99, 97, 1, 98, 0, 101, 254, 253, 1, 99, 1, 136, 83, 0, 0, 0, 0, 0]), 
            init_file_meta(27634, 37,&[254, 99, 97, 1, 98, 255, 1, 137, 83, 0, 0, 0, 0, 0] ,&[254, 255, 99, 101, 1, 101, 101, 255, 98, 100, 98, 254, 97, 98, 254, 1, 191, 88, 0, 0, 0, 0, 0]), 
            init_file_meta(27576, 39,&[254, 255, 99, 101, 1, 255, 1, 99, 1, 192, 88, 0, 0, 0, 0, 0] ,&[255, 99, 101, 101, 100, 1, 247, 93, 0, 0, 0, 0, 0]), 
            init_file_meta(27493, 41,&[255, 99, 101, 101, 101, 1, 248, 93, 0, 0, 0, 0, 0] ,&[255, 255, 101, 97, 0, 253, 98, 97, 1, 48, 99, 0, 0, 0, 0, 0]), 
        ];
        let mut iter = LevelFileNumIter::new(iter, list);
        iter.seek(&[14, 255, 1, 1, 98, 255, 0, 1, 135, 99, 0, 0, 0, 0, 0]);
        assert_eq!(
            iter.key(),
            &[97, 1, 97, 98, 1, 100, 0, 0, 1, 225, 20, 0, 0, 0, 0, 0]
        );
        assert_eq!(
            iter.value(),
            &[11, 0, 0, 0, 0, 0, 0, 0, 126, 107, 0, 0, 0, 0, 0, 0]
        );

        iter.seek(&[99, 253, 97, 99, 100, 255, 1, 255, 46, 0, 0, 0, 0, 0]);
        assert_eq!(
            iter.key(),
            &[100, 97, 100, 100, 1, 1, 47, 52, 0, 0, 0, 0, 0]
        );
        assert_eq!(
            iter.value(),
            &[23, 0, 0, 0, 0, 0, 0, 0, 160, 108, 0, 0, 0, 0, 0, 0]
        );
        iter.seek(&[99, 253, 97, 99, 101, 255, 1, 255, 46, 0, 0, 0, 0, 0]);
        assert_eq!(
            iter.key(),
            &[100, 97, 100, 100, 1, 1, 47, 52, 0, 0, 0, 0, 0]
        );
        assert_eq!(
            iter.value(),
            &[23, 0, 0, 0, 0, 0, 0, 0, 160, 108, 0, 0, 0, 0, 0, 0]
        );
    }

    #[test]
    #[should_panic]
    fn test_error() {
        let mut s = ErrorIterator::new();
        assert_eq!(s.valid(), false);
        s.seek_to_last();
        s.seek_to_first();
        s.seek(&[]);

        let result = std::panic::catch_unwind(|| s.key());
        assert!(result.is_err());
        let result = std::panic::catch_unwind(|| s.value());
        assert!(result.is_err());
        s.next();
    }
}
